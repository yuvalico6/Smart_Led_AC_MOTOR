/***************************************************
                  MAIN Project - smart led

 ****************************************************/
//#include <ESP8266WiFi.h>
#include <WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include <string.h>
#include "LiquidCrystal.h"

/************************* WiFi Access Point *********************************/

#define WLAN_SSID       "Yuvalico6"
#define WLAN_PASS       "yuvel674"

/************************* Adafruit.io Setup *********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "yuvalico6"
#define AIO_KEY         "aio_Swyj134ov5yGaeIBEkKbS2cy6OSf"

/************************* Global State *********************************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/

// Notice MQTT paths for AIO follow the form: <username>/feeds/<feedname>
Adafruit_MQTT_Publish LDR_PUB = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/middle-project.photo-resistor");
Adafruit_MQTT_Subscribe LDR_SUB = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/middle-project.photo-resistor");
Adafruit_MQTT_Publish MOTOR =  Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/middle-project.motor");
Adafruit_MQTT_Publish AC = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/middle-project.ac");
/*************************** Sketch Code ************************************/

void MQTT_connect();

//LCD
const int RS = 25, EN = 26, d4 = 32, d5 = 33, d6 = 27, d7 = 14;
LiquidCrystal lcd(RS, EN, d4, d5, d6, d7);

//RFID
#define AC_TRIG 19
#define LED_TRIG  23

//LDR
#define LDR_PIN  A0

//LED
#define ledPin 21
#define Calib_IN 22
#define Calib_OUT 18
int LDRMax = 0;

// setting PWM properties
const int freq = 5000;
const int ledChannel = 0;
const int resolution = 8;

void setup() {
  Serial.begin(115200);
  lcd.begin(16, 2);
  delay(1000);
  Serial.println(F("Starting..."));
  lcd.print("Starting...");
  delay(1000);

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  lcd.clear();
  lcd.print("Connecting to ");
  Serial.println(WLAN_SSID);
  lcd.setCursor(0, 1);
  lcd.print(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    lcd.print(".");
  }
  //  Serial.println();

  Serial.println("WiFi connected");
  lcd.clear();
  lcd.print("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());
  Serial.println();

  // SETUP ALL THE SUBSRCIPTIONS HERE
  mqtt.subscribe(& LDR_SUB);

  // configure LED PWM functionalitites
  ledcSetup(ledChannel, freq, resolution);

  // attach the channel to the GPIO to be controlled
  ledcAttachPin(ledPin, ledChannel);

  pinMode(Calib_OUT, OUTPUT);
}

void loop() {

  // We must keep this for now
  MQTT_connect();


  if (digitalRead(AC_TRIG) == HIGH && digitalRead(LED_TRIG) == HIGH) {
    AC.publish("OFF");
    lcd.clear();
    lcd.print("AC OFF");
    ledcWrite(ledChannel, 0);
    lcd.clear();
    lcd.print("LED OFF");
    lcd.clear();
    lcd.print("Good bye,");
    lcd.setCursor(0, 1);
    lcd.print("See you soon!");
    delay(10000);
  }

  else if (digitalRead(AC_TRIG) == LOW && digitalRead(LED_TRIG) == LOW) {
    lcd.clear();
    lcd.print("Smart Led is ON");
    AC.publish("ON");
    delay(5000);

    /************* LDR_PUB *************/
    int LDR_VAL = analogRead(LDR_PIN);

    Serial.print(F("\nSending val: "));
    Serial.print(LDR_VAL);
    Serial.print("...");
    lcd.clear();
    lcd.print("Sending val: ");
    lcd.setCursor(0, 1);
    lcd.print(LDR_VAL);
    lcd.print("...");
    if (! LDR_PUB.publish(LDR_VAL)) {
      Serial.println(F("Failed"));
      lcd.print("Failed");
    } else {
      Serial.println(F("OK!"));
      lcd.print("OK!");
    }
    LDR_PUB.publish(LDR_VAL);
    delay(5000);

    /************* LDR_SUB *************/
    Adafruit_MQTT_Subscribe *subscription;
    while ((subscription = mqtt.readSubscription(5000))) {

      /************* LDR_SUB *************/
      if (digitalRead(AC_TRIG) == HIGH && digitalRead(LED_TRIG) == HIGH) {
        break;
      }
      if (subscription == &LDR_SUB) {
        Serial.print(F("\nReceiving val: "));
        Serial.println((char *)LDR_SUB.lastread);
        lcd.clear();
        lcd.print("Receiving val:");
        lcd.setCursor(0, 1);
        lcd.print((char *)LDR_SUB.lastread);
        digitalWrite(Calib_OUT, HIGH);
        delay(300);
        digitalWrite(Calib_OUT, LOW);
        delay(3000);

        uint16_t inputval = atoi((char *)LDR_SUB.lastread);  // convert to a number

        //Calibration
        if (digitalRead(Calib_IN) == HIGH) {
          // record the maximum sensor value
          LDRMax = inputval;
          Serial.print(F("\nCalibration..."));
          Serial.print(F("\nMax Value:"));
          Serial.print(LDRMax);
          lcd.clear();
          lcd.print("Calibration...");
          lcd.setCursor(0, 1);
          lcd.print("Max Value:");
          lcd.print(LDRMax);
          delay(3000);
          lcd.clear();
          lcd.print("Calibrated!");
          digitalWrite(Calib_OUT, HIGH);
          delay(300);
          digitalWrite(Calib_OUT, LOW);
          delay(300);
          digitalWrite(Calib_OUT, HIGH);
          delay(300);
          digitalWrite(Calib_OUT, LOW);
          delay(300);
          digitalWrite(Calib_OUT, HIGH);
          delay(300);
          digitalWrite(Calib_OUT, LOW);
        }

        if (inputval < LDRMax * 0.25) {
          ledcWrite(ledChannel, 1023);
          Serial.print(F("\nBrightness Level: "));
          Serial.print("High");
          Serial.print(F("\n"));
          lcd.clear();
          lcd.print("Brightness Level:");
          lcd.setCursor(0, 1);
          lcd.print("High");
        }

        if (inputval >  LDRMax * 0.25 && inputval < LDRMax * 0.5) {
          ledcWrite(ledChannel, 400);
          Serial.print(F("\nBrightness Level: "));
          Serial.print("Medium");
          Serial.print(F("\n"));
          lcd.clear();
          lcd.print("Brightness Level:");
          lcd.setCursor(0, 1);
          lcd.print("Medium");
        }

        if (inputval >  LDRMax * 0.5 && inputval < LDRMax * 0.75) {
          ledcWrite(ledChannel, 300);
          Serial.print(F("\nBrightness Level: "));
          Serial.print("Low");
          Serial.print(F("\n"));
          lcd.clear();
          lcd.print("Brightness Level:");
          lcd.setCursor(0, 1);
          lcd.print("LOW");
        }
        if (inputval >  LDRMax * 0.75) {
          ledcWrite(ledChannel, 0);
          Serial.print(F("\nLED: "));
          Serial.print("OFF");
          Serial.print(F("\n"));
          lcd.clear();
          lcd.print("LED is OFF");
        }
        delay(3000);
      }
    }
  }
  else if (digitalRead(AC_TRIG) == LOW) {
    AC.publish("ON");
    delay(5000);
  }
}


// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");
  lcd.clear();
  lcd.print("Connecting to");
  lcd.setCursor(0, 1);
  lcd.print("MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
    Serial.println(mqtt.connectErrorString(ret));
    lcd.setCursor(0, 1);
    lcd.print(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    lcd.clear();
    lcd.print("Retrying");
    lcd.setCursor(0, 1);
    lcd.print("to connect...");
    ledcWrite(ledChannel, 0);
    mqtt.disconnect();
    delay(5000);  // wait 5 seconds
    retries--;
    if (retries == 0) {
      // basically die and wait for WDT to reset me
      while (1);
    }
  }
  Serial.println("MQTT Connected!");
  lcd.clear();
  lcd.print("MQTT Connected!");
  delay(3000);
  lcd.clear();
}
