/***************************************************
                  MAIN Project -motor

 ****************************************************/
#include <ESP8266WiFi.h>
//#include <WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"
#include <string.h>
#include "Servo.h"

/************************* WiFi Access Point *********************************/

#define WLAN_SSID       "Yuvalico6"
#define WLAN_PASS       "yuvel674"

/************************* Adafruit.io Setup *********************************/

#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883                   // use 8883 for SSL
#define AIO_USERNAME    "yuvalico6"
#define AIO_KEY         "aio_Swyj134ov5yGaeIBEkKbS2cy6OSf"

/************************* Global State *********************************/

// Create an ESP8266 WiFiClient class to connect to the MQTT server.
WiFiClient client;
// or... use WiFiFlientSecure for SSL
//WiFiClientSecure client;

// Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

/****************************** Feeds ***************************************/

Adafruit_MQTT_Subscribe MOTOR_SUB = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/middle-project.motor");
Adafruit_MQTT_Publish MOTOR_PUB =   Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/middle-project.motor");
/*************************** Sketch Code ************************************/

void MQTT_connect();
 
//MOTOR
#define servo_pin 16
Servo myservo;


void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println(F("Starting..."));
  delay(1000);

  // Connect to WiFi access point.
  Serial.println(); Serial.println();
  Serial.print("Connecting to ");
  Serial.println(WLAN_SSID);

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();

  Serial.println("WiFi connected");
  Serial.println("IP address: "); Serial.println(WiFi.localIP());
  Serial.println();

  // SETUP ALL THE SUBSRCIPTIONS HERE
  mqtt.subscribe(& MOTOR_SUB);

  myservo.attach(servo_pin);
  myservo.write(0);
}

void loop() {

  // We must keep this for now
  MQTT_connect();

  /************* Subscribes ***********/
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(5000))) {

    /************* MOTOR *************/
    if (subscription == &MOTOR_SUB) {
      Serial.print(F("\nMOTOR Got: "));
      Serial.println((char *)MOTOR_SUB.lastread);
      if (!strcmp((char*)MOTOR_SUB.lastread, "ON")) {
        myservo.write(180);
        delay(10000);
        myservo.write(0);
        delay(5000);
      }
    }
  }
  MOTOR_PUB.publish("OFF");
}

// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Stop if already connected.
  if (mqtt.connected()) {
    return;
  }

  Serial.print("Connecting to MQTT... ");

  uint8_t retries = 3;
  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Retrying MQTT connection in 5 seconds...");
    mqtt.disconnect();
    delay(5000);  // wait 5 seconds
    retries--;
    if (retries == 0) {
      // basically die and wait for WDT to reset me
      while (1);
    }
  }
  Serial.println("MQTT Connected!");
}
